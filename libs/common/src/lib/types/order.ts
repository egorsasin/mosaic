import {
  AlreadyLoggedInError,
  EmailAddressConflictError,
  GuestCheckoutError,
  NoActiveOrderError,
} from './errors';

export interface Order {
  id: number;
  code: string;
}

/** Passed as input to the `addPaymentToOrder` mutation. */
export type PaymentInput = {
  /**
   * This field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method
   * as the "metadata" argument. For example, it could contain an ID for the payment and other
   * data generated by the payment provider.
   */
  metadata: Record<string, unknown>;
  /** This field should correspond to the `code` property of a PaymentMethod. */
  method: string;
};

export type ShippingInput = {
  metadata: Record<string, unknown>;
  shippingMethodId: number;
};

export type SetCustomerForOrderResult =
  | NoActiveOrderError
  | AlreadyLoggedInError
  | EmailAddressConflictError
  | GuestCheckoutError
  | Order;
